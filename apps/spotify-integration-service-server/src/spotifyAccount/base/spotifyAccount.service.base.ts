/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SpotifyAccount as PrismaSpotifyAccount,
  Playlist as PrismaPlaylist,
  User as PrismaUser,
} from "@prisma/client";

export class SpotifyAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SpotifyAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.spotifyAccount.count(args);
  }

  async spotifyAccounts(
    args: Prisma.SpotifyAccountFindManyArgs
  ): Promise<PrismaSpotifyAccount[]> {
    return this.prisma.spotifyAccount.findMany(args);
  }
  async spotifyAccount(
    args: Prisma.SpotifyAccountFindUniqueArgs
  ): Promise<PrismaSpotifyAccount | null> {
    return this.prisma.spotifyAccount.findUnique(args);
  }
  async createSpotifyAccount(
    args: Prisma.SpotifyAccountCreateArgs
  ): Promise<PrismaSpotifyAccount> {
    return this.prisma.spotifyAccount.create(args);
  }
  async updateSpotifyAccount(
    args: Prisma.SpotifyAccountUpdateArgs
  ): Promise<PrismaSpotifyAccount> {
    return this.prisma.spotifyAccount.update(args);
  }
  async deleteSpotifyAccount(
    args: Prisma.SpotifyAccountDeleteArgs
  ): Promise<PrismaSpotifyAccount> {
    return this.prisma.spotifyAccount.delete(args);
  }

  async findPlaylists(
    parentId: string,
    args: Prisma.PlaylistFindManyArgs
  ): Promise<PrismaPlaylist[]> {
    return this.prisma.spotifyAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .playlists(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.spotifyAccount
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
