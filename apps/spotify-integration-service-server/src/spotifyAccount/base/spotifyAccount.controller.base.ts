/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SpotifyAccountService } from "../spotifyAccount.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SpotifyAccountCreateInput } from "./SpotifyAccountCreateInput";
import { SpotifyAccount } from "./SpotifyAccount";
import { SpotifyAccountFindManyArgs } from "./SpotifyAccountFindManyArgs";
import { SpotifyAccountWhereUniqueInput } from "./SpotifyAccountWhereUniqueInput";
import { SpotifyAccountUpdateInput } from "./SpotifyAccountUpdateInput";
import { PlaylistFindManyArgs } from "../../playlist/base/PlaylistFindManyArgs";
import { Playlist } from "../../playlist/base/Playlist";
import { PlaylistWhereUniqueInput } from "../../playlist/base/PlaylistWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SpotifyAccountControllerBase {
  constructor(
    protected readonly service: SpotifyAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SpotifyAccount })
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SpotifyAccountCreateInput,
  })
  async createSpotifyAccount(
    @common.Body() data: SpotifyAccountCreateInput
  ): Promise<SpotifyAccount> {
    return await this.service.createSpotifyAccount({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        spotifyId: true,
        accessToken: true,
        refreshToken: true,
        expiryDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SpotifyAccount] })
  @ApiNestedQuery(SpotifyAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spotifyAccounts(
    @common.Req() request: Request
  ): Promise<SpotifyAccount[]> {
    const args = plainToClass(SpotifyAccountFindManyArgs, request.query);
    return this.service.spotifyAccounts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        spotifyId: true,
        accessToken: true,
        refreshToken: true,
        expiryDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SpotifyAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async spotifyAccount(
    @common.Param() params: SpotifyAccountWhereUniqueInput
  ): Promise<SpotifyAccount | null> {
    const result = await this.service.spotifyAccount({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        spotifyId: true,
        accessToken: true,
        refreshToken: true,
        expiryDate: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SpotifyAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: SpotifyAccountUpdateInput,
  })
  async updateSpotifyAccount(
    @common.Param() params: SpotifyAccountWhereUniqueInput,
    @common.Body() data: SpotifyAccountUpdateInput
  ): Promise<SpotifyAccount | null> {
    try {
      return await this.service.updateSpotifyAccount({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          spotifyId: true,
          accessToken: true,
          refreshToken: true,
          expiryDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SpotifyAccount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSpotifyAccount(
    @common.Param() params: SpotifyAccountWhereUniqueInput
  ): Promise<SpotifyAccount | null> {
    try {
      return await this.service.deleteSpotifyAccount({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          spotifyId: true,
          accessToken: true,
          refreshToken: true,
          expiryDate: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/playlists")
  @ApiNestedQuery(PlaylistFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async findPlaylists(
    @common.Req() request: Request,
    @common.Param() params: SpotifyAccountWhereUniqueInput
  ): Promise<Playlist[]> {
    const query = plainToClass(PlaylistFindManyArgs, request.query);
    const results = await this.service.findPlaylists(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        spotifyId: true,
        name: true,
        description: true,

        spotifyAccount: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/playlists")
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "update",
    possession: "any",
  })
  async connectPlaylists(
    @common.Param() params: SpotifyAccountWhereUniqueInput,
    @common.Body() body: PlaylistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playlists: {
        connect: body,
      },
    };
    await this.service.updateSpotifyAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/playlists")
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "update",
    possession: "any",
  })
  async updatePlaylists(
    @common.Param() params: SpotifyAccountWhereUniqueInput,
    @common.Body() body: PlaylistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playlists: {
        set: body,
      },
    };
    await this.service.updateSpotifyAccount({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/playlists")
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "update",
    possession: "any",
  })
  async disconnectPlaylists(
    @common.Param() params: SpotifyAccountWhereUniqueInput,
    @common.Body() body: PlaylistWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      playlists: {
        disconnect: body,
      },
    };
    await this.service.updateSpotifyAccount({
      where: params,
      data,
      select: { id: true },
    });
  }
}
