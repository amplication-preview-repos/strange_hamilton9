/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SpotifyAccount } from "./SpotifyAccount";
import { SpotifyAccountCountArgs } from "./SpotifyAccountCountArgs";
import { SpotifyAccountFindManyArgs } from "./SpotifyAccountFindManyArgs";
import { SpotifyAccountFindUniqueArgs } from "./SpotifyAccountFindUniqueArgs";
import { CreateSpotifyAccountArgs } from "./CreateSpotifyAccountArgs";
import { UpdateSpotifyAccountArgs } from "./UpdateSpotifyAccountArgs";
import { DeleteSpotifyAccountArgs } from "./DeleteSpotifyAccountArgs";
import { PlaylistFindManyArgs } from "../../playlist/base/PlaylistFindManyArgs";
import { Playlist } from "../../playlist/base/Playlist";
import { User } from "../../user/base/User";
import { SpotifyAccountService } from "../spotifyAccount.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SpotifyAccount)
export class SpotifyAccountResolverBase {
  constructor(
    protected readonly service: SpotifyAccountService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "read",
    possession: "any",
  })
  async _spotifyAccountsMeta(
    @graphql.Args() args: SpotifyAccountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SpotifyAccount])
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "read",
    possession: "any",
  })
  async spotifyAccounts(
    @graphql.Args() args: SpotifyAccountFindManyArgs
  ): Promise<SpotifyAccount[]> {
    return this.service.spotifyAccounts(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SpotifyAccount, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "read",
    possession: "own",
  })
  async spotifyAccount(
    @graphql.Args() args: SpotifyAccountFindUniqueArgs
  ): Promise<SpotifyAccount | null> {
    const result = await this.service.spotifyAccount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SpotifyAccount)
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "create",
    possession: "any",
  })
  async createSpotifyAccount(
    @graphql.Args() args: CreateSpotifyAccountArgs
  ): Promise<SpotifyAccount> {
    return await this.service.createSpotifyAccount({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SpotifyAccount)
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "update",
    possession: "any",
  })
  async updateSpotifyAccount(
    @graphql.Args() args: UpdateSpotifyAccountArgs
  ): Promise<SpotifyAccount | null> {
    try {
      return await this.service.updateSpotifyAccount({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SpotifyAccount)
  @nestAccessControl.UseRoles({
    resource: "SpotifyAccount",
    action: "delete",
    possession: "any",
  })
  async deleteSpotifyAccount(
    @graphql.Args() args: DeleteSpotifyAccountArgs
  ): Promise<SpotifyAccount | null> {
    try {
      return await this.service.deleteSpotifyAccount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Playlist], { name: "playlists" })
  @nestAccessControl.UseRoles({
    resource: "Playlist",
    action: "read",
    possession: "any",
  })
  async findPlaylists(
    @graphql.Parent() parent: SpotifyAccount,
    @graphql.Args() args: PlaylistFindManyArgs
  ): Promise<Playlist[]> {
    const results = await this.service.findPlaylists(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: SpotifyAccount
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
